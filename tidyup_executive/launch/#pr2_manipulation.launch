<!-- -->
<launch>

  <arg name="use_slip_controllers" default="false"/>
  <arg name="use_right_arm" default="true"/>
  <arg name="use_left_arm"  default="true"/>
  <arg name="use_task_cartesian" default="false" />		
  <arg name="sim" default="false" />
  <arg name="use_probabilistic_grasp_planner" default="false" />
  <arg name="use_jinv" default="false" />
  <arg name="use_rmrc" default="false" />		
  <arg name="reactive_grasping" default="true" />		

  <!-- hand descriptions -->
  <rosparam command="load" file="$(find pr2_object_manipulation_launch)/config/pr2_hand_descriptions.yaml"/>

  <!-- arm configurations -->
  <rosparam command="load" file="$(find pr2_object_manipulation_launch)/config/pr2_arm_configurations.yaml"/>

  <!--grasp planners-->

  <!-- database-backed grasp planning is now provided directly by the database wrapper node -->
  <!-- which must be started separately -->
  
  <include file="$(find pr2_gripper_grasp_planner_cluster)/launch/pr2_gripper_grasp_planner_cluster_server.launch"/>

  <include if="$(arg use_probabilistic_grasp_planner)" 
    file="$(find bayesian_grasp_planner)/launch/bayesian_grasp_planner_node.launch"/>

  <!--reactive approach-->

  <group if="$(arg reactive_grasping)">
    <node if="$(arg use_right_arm)" name="reactive_grasp_node_right" pkg="pr2_gripper_reactive_approach" 
      type="reactive_grasp_server.py" args="r" respawn="false" output="screen">
      <param name="use_slip_controller" value="$(arg use_slip_controllers)"/>
      <param name="use_slip_detection" value="$(arg use_slip_controllers)"/>
      <param name="use_task_cartesian" value="$(arg use_task_cartesian)"/>
    </node>
    <node if="$(arg use_left_arm)" name="reactive_grasp_node_left" pkg="pr2_gripper_reactive_approach" 
      type="reactive_grasp_server.py" args="l" respawn="false" output="screen">
      <param name="use_slip_controller" value="$(arg use_slip_controllers)"/>
      <param name="use_slip_detection" value="$(arg use_slip_controllers)"/>
      <param name="use_task_cartesian" value="$(arg use_task_cartesian)"/>
    </node>
  </group>



  <!--gripper grasp posture controllers-->

  <include unless="$(arg use_slip_controllers)" 
   file="$(find pr2_gripper_grasp_controller)/launch/both_grippers_grasp_posture_action.launch" >
    <arg name="use_right_arm" value="$(arg use_right_arm)" />
    <arg name="use_left_arm" value="$(arg use_left_arm)" />
  </include>  
  <include if="$(arg use_slip_controllers)" 
   file="$(find pr2_gripper_grasp_controller)/launch/both_grippers_finger_sensor_grasp_posture_action.launch" >
    <arg name="use_right_arm" value="$(arg use_right_arm)" />
    <arg name="use_left_arm" value="$(arg use_left_arm)" />
  </include>


  <!-- Cartesian controller -->
  <include if="$(arg use_task_cartesian)" file="$(find pr2_object_manipulation_launch)/launch/c_jtask.launch">
    <arg name="use_right_arm" value="$(arg use_right_arm)" />
    <arg name="use_left_arm" value="$(arg use_left_arm)" />
	<arg name="sim" value="$(arg sim)" />
  </include>

  <group unless="$(arg use_rmrc)">
    <group unless="$(arg use_task_cartesian)">
      <include if="$(arg use_jinv)" file="$(find pr2_object_manipulation_launch)/launch/c_jinv.launch" >
        <arg name="use_right_arm" value="$(arg use_right_arm)" />
        <arg name="use_left_arm" value="$(arg use_left_arm)" />
	    <arg name="sim" value="$(arg sim)" />
      </include>
      <include unless="$(arg use_jinv)" file="$(find pr2_object_manipulation_launch)/launch/c_jt.launch" >
        <arg name="use_right_arm" value="$(arg use_right_arm)" />
        <arg name="use_left_arm" value="$(arg use_left_arm)" />
	    <arg name="sim" value="$(arg sim)" />
      </include>
    </group>
  </group>

  <include if="$(arg use_rmrc)" file="$(find pr2_object_manipulation_launch)/launch/c_rmrc.launch" >
      <arg name="use_right_arm" value="$(arg use_right_arm)" />
      <arg name="use_left_arm" value="$(arg use_left_arm)" />
	    <arg name="sim" value="$(arg sim)" />
   </include>

  <!--object manipulator-->

  <include file="$(find tidyup_executive)/launch/object_manipulator.launch" />

  <!-- cluster bounding box finder--> 

  <node name="cluster_bounding_box_finder" pkg="object_manipulator" cwd="node"
    type="cluster_bounding_box_finder_server.py" output="screen" respawn="false" >
	<param name="z_up_frame" value="/base_link" />
  </node>
	
</launch>
