# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -lF'
alias la='ls -A'
alias l='ls -CF'
#alias catkin='cd ~/ws && catkin_make'
alias pr2='cd ~/ws/src/pr2_tidyup'
alias simulation='roslaunch tidyup_demo_launch screen_simulation.launch'
alias killscreen='screen -S ros -X quit'
alias gki='cd ~/ws/src/gki_pr2_symbolic_planning'
alias actions.yaml='gedit ~/ws/src/pr2_tidyup/tidyup_demo_launch/config/planning/actions.yaml'
alias alarm='speaker_alarm 1500 0.5 > bep 1500 0.5'

# function to create a beep sound
speaker_alarm() {
  ( \speaker-test  --frequency $1  --test sine )&
  pid=$!
  \sleep ${2}
  \kill -9 $pid
}

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# GAZEBO FROM SOURCE
export LD_LIBRARY_PATH=/usr/include:/home/luc/gazebo_local/lib:/home/luc/gazebo_local/lib:/home/luc/gazebo_local/lib:
export PATH=/home/luc/gazebo_local/bin:/home/luc/gazebo_local/bin:/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
export PKG_CONFIG_PATH=/home/luc/gazebo_local/lib/pkgconfig:/home/luc/gazebo_local/lib/pkgconfig:

# The value of this variable, if set, is passed to make when building packages. The idea is to let you exploit a multi-processor machine. For example, if you have 8 processors / cores and want to run as many parallel jobs as possible, as long as the system load is less than 8, by limiting the jobs to 8 you prevent overshoot at startup time: 
export ROS_PARALLEL_JOBS='-j8 -l8'
#source /opt/ros/hydro/setup.sh
source ~/ws/devel/setup.bash
#source ~/gazebo_ros/devel/setup.bash

#export ROSCONSOLE_CONFIG_FILE=~/ws/src/rosconsole.config

#export ROBOT_INITIAL_POSE="-x 4.25 -y 8.5 -z 0 -R 0 -P 0 -Y -1.57"
# position in front of table with arms at front
#export ROBOT_INITIAL_POSE="-x 4.85523 -y 6.7 -z 0 -R 0 -P 0 -Y -1.57"

# table_1_location4_room1
#export ROBOT_INITIAL_POSE="-x 4.85523 -y 6.01968 -z 0 -R 0 -P 0 -Y -1.57"

#export BOOST_ROOT=/usr/local/
#export BOOST_INCLUDE_DIRS=/usr/local/include
#export BOOST_LIBRARY_DIRS=/usr/local/lib

#export EIGEN3_INCLUDE_DIR=/usr/include/eigen3/




